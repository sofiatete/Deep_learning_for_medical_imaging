{"format": "torch", "nodes": [{"name": "model", "id": 12958708464, "class_name": "ResNet50(\n  (resnet): ResNet(\n    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (relu): ReLU(inplace=True)\n    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    (layer1): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (layer2): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (layer3): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (4): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (5): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (layer4): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n    (fc): Identity()\n  )\n  (classifier): Sequential(\n    (0): Flatten(start_dim=1, end_dim=-1)\n    (1): Linear(in_features=2048, out_features=512, bias=True)\n    (2): LeakyReLU(negative_slope=0.01)\n    (3): Dropout(p=0.4, inplace=False)\n    (4): Linear(in_features=512, out_features=128, bias=True)\n    (5): LeakyReLU(negative_slope=0.01)\n    (6): Dropout(p=0.3, inplace=False)\n    (7): Linear(in_features=128, out_features=1, bias=True)\n  )\n)", "parameters": [["resnet.conv1.weight", [64, 3, 7, 7]], ["resnet.bn1.weight", [64]], ["resnet.bn1.bias", [64]], ["resnet.layer1.0.conv1.weight", [64, 64, 1, 1]], ["resnet.layer1.0.bn1.weight", [64]], ["resnet.layer1.0.bn1.bias", [64]], ["resnet.layer1.0.conv2.weight", [64, 64, 3, 3]], ["resnet.layer1.0.bn2.weight", [64]], ["resnet.layer1.0.bn2.bias", [64]], ["resnet.layer1.0.conv3.weight", [256, 64, 1, 1]], ["resnet.layer1.0.bn3.weight", [256]], ["resnet.layer1.0.bn3.bias", [256]], ["resnet.layer1.0.downsample.0.weight", [256, 64, 1, 1]], ["resnet.layer1.0.downsample.1.weight", [256]], ["resnet.layer1.0.downsample.1.bias", [256]], ["resnet.layer1.1.conv1.weight", [64, 256, 1, 1]], ["resnet.layer1.1.bn1.weight", [64]], ["resnet.layer1.1.bn1.bias", [64]], ["resnet.layer1.1.conv2.weight", [64, 64, 3, 3]], ["resnet.layer1.1.bn2.weight", [64]], ["resnet.layer1.1.bn2.bias", [64]], ["resnet.layer1.1.conv3.weight", [256, 64, 1, 1]], ["resnet.layer1.1.bn3.weight", [256]], ["resnet.layer1.1.bn3.bias", [256]], ["resnet.layer1.2.conv1.weight", [64, 256, 1, 1]], ["resnet.layer1.2.bn1.weight", [64]], ["resnet.layer1.2.bn1.bias", [64]], ["resnet.layer1.2.conv2.weight", [64, 64, 3, 3]], ["resnet.layer1.2.bn2.weight", [64]], ["resnet.layer1.2.bn2.bias", [64]], ["resnet.layer1.2.conv3.weight", [256, 64, 1, 1]], ["resnet.layer1.2.bn3.weight", [256]], ["resnet.layer1.2.bn3.bias", [256]], ["resnet.layer2.0.conv1.weight", [128, 256, 1, 1]], ["resnet.layer2.0.bn1.weight", [128]], ["resnet.layer2.0.bn1.bias", [128]], ["resnet.layer2.0.conv2.weight", [128, 128, 3, 3]], ["resnet.layer2.0.bn2.weight", [128]], ["resnet.layer2.0.bn2.bias", [128]], ["resnet.layer2.0.conv3.weight", [512, 128, 1, 1]], ["resnet.layer2.0.bn3.weight", [512]], ["resnet.layer2.0.bn3.bias", [512]], ["resnet.layer2.0.downsample.0.weight", [512, 256, 1, 1]], ["resnet.layer2.0.downsample.1.weight", [512]], ["resnet.layer2.0.downsample.1.bias", [512]], ["resnet.layer2.1.conv1.weight", [128, 512, 1, 1]], ["resnet.layer2.1.bn1.weight", [128]], ["resnet.layer2.1.bn1.bias", [128]], ["resnet.layer2.1.conv2.weight", [128, 128, 3, 3]], ["resnet.layer2.1.bn2.weight", [128]], ["resnet.layer2.1.bn2.bias", [128]], ["resnet.layer2.1.conv3.weight", [512, 128, 1, 1]], ["resnet.layer2.1.bn3.weight", [512]], ["resnet.layer2.1.bn3.bias", [512]], ["resnet.layer2.2.conv1.weight", [128, 512, 1, 1]], ["resnet.layer2.2.bn1.weight", [128]], ["resnet.layer2.2.bn1.bias", [128]], ["resnet.layer2.2.conv2.weight", [128, 128, 3, 3]], ["resnet.layer2.2.bn2.weight", [128]], ["resnet.layer2.2.bn2.bias", [128]], ["resnet.layer2.2.conv3.weight", [512, 128, 1, 1]], ["resnet.layer2.2.bn3.weight", [512]], ["resnet.layer2.2.bn3.bias", [512]], ["resnet.layer2.3.conv1.weight", [128, 512, 1, 1]], ["resnet.layer2.3.bn1.weight", [128]], ["resnet.layer2.3.bn1.bias", [128]], ["resnet.layer2.3.conv2.weight", [128, 128, 3, 3]], ["resnet.layer2.3.bn2.weight", [128]], ["resnet.layer2.3.bn2.bias", [128]], ["resnet.layer2.3.conv3.weight", [512, 128, 1, 1]], ["resnet.layer2.3.bn3.weight", [512]], ["resnet.layer2.3.bn3.bias", [512]], ["resnet.layer3.0.conv1.weight", [256, 512, 1, 1]], ["resnet.layer3.0.bn1.weight", [256]], ["resnet.layer3.0.bn1.bias", [256]], ["resnet.layer3.0.conv2.weight", [256, 256, 3, 3]], ["resnet.layer3.0.bn2.weight", [256]], ["resnet.layer3.0.bn2.bias", [256]], ["resnet.layer3.0.conv3.weight", [1024, 256, 1, 1]], ["resnet.layer3.0.bn3.weight", [1024]], ["resnet.layer3.0.bn3.bias", [1024]], ["resnet.layer3.0.downsample.0.weight", [1024, 512, 1, 1]], ["resnet.layer3.0.downsample.1.weight", [1024]], ["resnet.layer3.0.downsample.1.bias", [1024]], ["resnet.layer3.1.conv1.weight", [256, 1024, 1, 1]], ["resnet.layer3.1.bn1.weight", [256]], ["resnet.layer3.1.bn1.bias", [256]], ["resnet.layer3.1.conv2.weight", [256, 256, 3, 3]], ["resnet.layer3.1.bn2.weight", [256]], ["resnet.layer3.1.bn2.bias", [256]], ["resnet.layer3.1.conv3.weight", [1024, 256, 1, 1]], ["resnet.layer3.1.bn3.weight", [1024]], ["resnet.layer3.1.bn3.bias", [1024]], ["resnet.layer3.2.conv1.weight", [256, 1024, 1, 1]], ["resnet.layer3.2.bn1.weight", [256]], ["resnet.layer3.2.bn1.bias", [256]], ["resnet.layer3.2.conv2.weight", [256, 256, 3, 3]], ["resnet.layer3.2.bn2.weight", [256]], ["resnet.layer3.2.bn2.bias", [256]], ["resnet.layer3.2.conv3.weight", [1024, 256, 1, 1]], ["resnet.layer3.2.bn3.weight", [1024]], ["resnet.layer3.2.bn3.bias", [1024]], ["resnet.layer3.3.conv1.weight", [256, 1024, 1, 1]], ["resnet.layer3.3.bn1.weight", [256]], ["resnet.layer3.3.bn1.bias", [256]], ["resnet.layer3.3.conv2.weight", [256, 256, 3, 3]], ["resnet.layer3.3.bn2.weight", [256]], ["resnet.layer3.3.bn2.bias", [256]], ["resnet.layer3.3.conv3.weight", [1024, 256, 1, 1]], ["resnet.layer3.3.bn3.weight", [1024]], ["resnet.layer3.3.bn3.bias", [1024]], ["resnet.layer3.4.conv1.weight", [256, 1024, 1, 1]], ["resnet.layer3.4.bn1.weight", [256]], ["resnet.layer3.4.bn1.bias", [256]], ["resnet.layer3.4.conv2.weight", [256, 256, 3, 3]], ["resnet.layer3.4.bn2.weight", [256]], ["resnet.layer3.4.bn2.bias", [256]], ["resnet.layer3.4.conv3.weight", [1024, 256, 1, 1]], ["resnet.layer3.4.bn3.weight", [1024]], ["resnet.layer3.4.bn3.bias", [1024]], ["resnet.layer3.5.conv1.weight", [256, 1024, 1, 1]], ["resnet.layer3.5.bn1.weight", [256]], ["resnet.layer3.5.bn1.bias", [256]], ["resnet.layer3.5.conv2.weight", [256, 256, 3, 3]], ["resnet.layer3.5.bn2.weight", [256]], ["resnet.layer3.5.bn2.bias", [256]], ["resnet.layer3.5.conv3.weight", [1024, 256, 1, 1]], ["resnet.layer3.5.bn3.weight", [1024]], ["resnet.layer3.5.bn3.bias", [1024]], ["resnet.layer4.0.conv1.weight", [512, 1024, 1, 1]], ["resnet.layer4.0.bn1.weight", [512]], ["resnet.layer4.0.bn1.bias", [512]], ["resnet.layer4.0.conv2.weight", [512, 512, 3, 3]], ["resnet.layer4.0.bn2.weight", [512]], ["resnet.layer4.0.bn2.bias", [512]], ["resnet.layer4.0.conv3.weight", [2048, 512, 1, 1]], ["resnet.layer4.0.bn3.weight", [2048]], ["resnet.layer4.0.bn3.bias", [2048]], ["resnet.layer4.0.downsample.0.weight", [2048, 1024, 1, 1]], ["resnet.layer4.0.downsample.1.weight", [2048]], ["resnet.layer4.0.downsample.1.bias", [2048]], ["resnet.layer4.1.conv1.weight", [512, 2048, 1, 1]], ["resnet.layer4.1.bn1.weight", [512]], ["resnet.layer4.1.bn1.bias", [512]], ["resnet.layer4.1.conv2.weight", [512, 512, 3, 3]], ["resnet.layer4.1.bn2.weight", [512]], ["resnet.layer4.1.bn2.bias", [512]], ["resnet.layer4.1.conv3.weight", [2048, 512, 1, 1]], ["resnet.layer4.1.bn3.weight", [2048]], ["resnet.layer4.1.bn3.bias", [2048]], ["resnet.layer4.2.conv1.weight", [512, 2048, 1, 1]], ["resnet.layer4.2.bn1.weight", [512]], ["resnet.layer4.2.bn1.bias", [512]], ["resnet.layer4.2.conv2.weight", [512, 512, 3, 3]], ["resnet.layer4.2.bn2.weight", [512]], ["resnet.layer4.2.bn2.bias", [512]], ["resnet.layer4.2.conv3.weight", [2048, 512, 1, 1]], ["resnet.layer4.2.bn3.weight", [2048]], ["resnet.layer4.2.bn3.bias", [2048]], ["classifier.1.weight", [512, 2048]], ["classifier.1.bias", [512]], ["classifier.4.weight", [128, 512]], ["classifier.4.bias", [128]], ["classifier.7.weight", [1, 128]], ["classifier.7.bias", [1]]], "output_shape": [[64, 1]], "num_parameters": [9408, 64, 64, 4096, 64, 64, 36864, 64, 64, 16384, 256, 256, 16384, 256, 256, 16384, 64, 64, 36864, 64, 64, 16384, 256, 256, 16384, 64, 64, 36864, 64, 64, 16384, 256, 256, 32768, 128, 128, 147456, 128, 128, 65536, 512, 512, 131072, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 131072, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 524288, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 524288, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 2097152, 2048, 2048, 1048576, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 1048576, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 1048576, 512, 65536, 128, 128, 1]}], "edges": []}